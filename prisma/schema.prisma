// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  username    String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  photo       String?  @db.Text
  phoneNumber String   @db.Char(13)
  address     String   @db.Text
  role        RoleUser @default(Customer)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Order Order[]
  Cart  Cart[]
}

enum RoleUser {
  SuperAdmin
  Admin
  Customer
}

model CategoryProduct {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  categoryId  String
  name        String   @db.VarChar(255)
  description String?  @db.LongText
  price       Decimal  @db.Decimal()
  stock       Int      @db.Int
  unit        String   @db.VarChar(255)
  photo       String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  CategoryProduct @relation(fields: [categoryId], references: [id])
  OrderItem OrderItem[]

  Cart Cart[]
}

model Cart {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int      @db.Int
  totalPrice Decimal  @db.Decimal()
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "userId_productId")
}

enum PaymentMethod {
  Cash
  Transfer
}

model Order {
  id              String        @id @default(uuid())
  order_code      String        @db.Text
  userId          String
  address         String        @db.Text
  phoneNumber     String        @db.Char(13)
  methodPayment   PaymentMethod @default(Cash)
  status          OrderStatus   @default(PENDING)
  total_price     Decimal       @db.Decimal()
  admin_fee       Decimal       @db.Decimal()
  shipping_fee    Decimal       @db.Decimal()
  order_date      DateTime
  processing_date DateTime?
  delivered_date  DateTime?
  completed_date  DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
  REFUNDED
  ON_HOLD
  RETURNED
  COMPLETED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @db.Int
  subTotal  Decimal  @db.Decimal()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  date      DateTime
  total     Decimal       @db.Decimal()
  status    PaymentStatus @default(Pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum PaymentStatus {
  Pending
  Success
  Failed
}
